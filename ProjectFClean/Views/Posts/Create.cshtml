@model ProjectFClean.Models.Post

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutDetails.cshtml";
    //Layout = null;
}
<h2>Create a Post</h2>


<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="table-responsive">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <table class="table">
                <tr>
                    <th>
                        @Html.Label("Service", htmlAttributes: new { @class = "control-label col-md-2 required" })
                    </th>

                    <td>
                        @Html.DropDownList("ServiceID", null, "Select a Service", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessage("ServiceID", "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.Label("Price", htmlAttributes: new { @class = "control-label col-md-2 required " })
                    </th>

                    <td>
                        @Html.TextBox("Price", null, new { @class = "form-control" })
                        @Html.ValidationMessage("Price", "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Location, "Address", htmlAttributes: new { @class = "control-label col-md-2 required" })
                    </th>

                    <td>
                        @Html.DropDownListFor(model => model.Location, new SelectList(new List<string>
                             {"Liên Chiểu", "Hải Châu", "Ngũ Hành Sơn", "Sơn Trà", "Cẩm Lệ","Thanh Khê"}),
                             new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2 " })
                    </th>

                    <td>
                        @Html.DropDownListFor(model => model.Gender, new SelectList(new List<string> { "Gender","Male", "Female" }), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
                    </th>

                    <td>
                        @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Experience, htmlAttributes: new { @class = "control-label col-md-2 " })
                    </th>

                    <td>
                        @Html.EditorFor(model => model.Experience, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Experience, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2  " })
                    </th>

                    <td>

                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </td>
                </tr>
            </table>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10" id="btn-create">
                    <input type="submit" value="Create" class="btn btn-primary" />

                    <a href="#" id="backToListLink">
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                    </a>
                </div>
            </div>

        </div>
    }
    <!-- JavaScript Libraries -->
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/wow/wow.min.js"></script>
    <script src="~/lib/easing/easing.min.js"></script>
    <script src="~/lib/waypoints/waypoints.min.js"></script>
    <script src="~/lib/owlcarousel/owl.carousel.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#backToListLink').click(function (event) {
                event.preventDefault(); // Prevent default anchor link behavior
                history.back(); // Go back one page in browser history
            });
        });
    </script>
    <script>
  $(document).ready(function () {
      $('form').submit(function (event) {
          event.preventDefault(); // Ngăn chặn gửi form đi mặc định

          // Kiểm tra dữ liệu nhập liệu
          var serviceId = $('#ServiceID').val();
          var price = $('#Price').val();
          var address = $('#Location').val();
          var experience = $('#Experience').val();
          var age = $('#Age').val();
          var description = $('#Description').val();
          if (!serviceId || !price || !address) {
              alert('Vui lòng điền đầy đủ thông tin cho Service, Price và Address.');
              return;
          }
          if (isNaN(price)) {
              alert('Price phải là số.');
              return; // Ngăn chặn gửi form đi nếu dữ liệu không hợp lệ
          }

          if (price.trim() !== '' && (price < 1000 || price % 1000 !== 0)) {
              alert('Price phải lớn hơn 1000đ và chia hết cho 1000.');
              return;
          }

          if (age.trim() !== '' && (age < 18 || age > 70)) {
              alert('Age phải nằm trong khoảng từ 18 đến 70 tuổi.');
              return;
          }
          if (experience < 0) {
              alert('Experience không được nhập số âm');
              return;
          }

          // Nếu dữ liệu hợp lệ, sử dụng AJAX để gửi form đi
          $.ajax({
              url: '@Url.Action("Create", "Posts")', // Địa chỉ URL để gửi yêu cầu
              type: 'POST', // Phương thức POST
              data: $(this).serialize(), // Dữ liệu form được gửi đi
              success: function (response) {

                  alert('Bài đăng của bạn đã được tạo thành công.');
                  window.location.href = '@Url.Action("Index", "Posts")'; // Chuyển hướng về trang danh sách bài đăng
              },
              error: function (xhr, status, error) {
                  // Xử lý lỗi (nếu có)
                  alert('Vui lòng điền đầy đủ thông tin cho Service, Price và Address. ' + error);
              }
          });
      });
  });
    </script>


</body>

<style>
    .required::after {
        content: "*";
        color: red;
    }

    .table-responsive th,
    .table-responsive td {
        padding: 10px;
        text-align: justify;
        font-size: 20px;
        color: black;
    }

    .table-responsive {
        padding: 0 200px;
    }

    h2 {
        display: flex;
        justify-content: center;
        padding: 20px;
    }

    #Description {
        width: 100%;
        height: 70px;
    }

    #btn-create {
        display: flex;
        justify-content: space-between;
        margin: 0 60px;
    }

    select#Location {
        background-color: white;
    }

    select#ServiceID {
        background-color: white;
    }

    select#Gender {
        background-color: white;
    }
</style>
